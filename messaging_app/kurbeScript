#!/bin/bash

# kurbeScript - Kubernetes Setup and Verification Script
# This script sets up a local Kubernetes cluster using Minikube

set -e  # Exit on any error

echo "=========================================="
echo "Kubernetes Local Cluster Setup Script"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install Minikube on different platforms
install_minikube() {
    print_status "Installing Minikube..."
    
    # Detect operating system
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        print_status "Detected Linux system. Installing Minikube..."
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        rm minikube-linux-amd64
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        print_status "Detected macOS system. Installing Minikube..."
        if command_exists brew; then
            brew install minikube
        else
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
            sudo install minikube-darwin-amd64 /usr/local/bin/minikube
            rm minikube-darwin-amd64
        fi
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        # Windows (Git Bash/Cygwin)
        print_status "Detected Windows system. Please install Minikube manually:"
        print_status "1. Download from: https://minikube.sigs.k8s.io/docs/start/"
        print_status "2. Or use: winget install minikube"
        print_error "Please install Minikube manually and run this script again."
        exit 1
    else
        print_error "Unsupported operating system: $OSTYPE"
        exit 1
    fi
}

# Function to install kubectl
install_kubectl() {
    print_status "Installing kubectl..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        rm kubectl
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command_exists brew; then
            brew install kubectl
        else
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
            sudo install kubectl /usr/local/bin/kubectl
            rm kubectl
        fi
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        # Windows
        print_status "Please install kubectl manually:"
        print_status "1. Download from: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/"
        print_status "2. Or use: winget install -e --id Kubernetes.kubectl"
        print_error "Please install kubectl manually and run this script again."
        exit 1
    fi
}

# Check if Minikube is installed
check_minikube() {
    print_status "Checking if Minikube is installed..."
    
    if ! command_exists minikube; then
        print_warning "Minikube is not installed."
        read -p "Would you like to install Minikube? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            install_minikube
        else
            print_error "Minikube is required to proceed. Exiting."
            exit 1
        fi
    else
        print_success "Minikube is already installed."
        minikube version
    fi
}

# Check if kubectl is installed
check_kubectl() {
    print_status "Checking if kubectl is installed..."
    
    if ! command_exists kubectl; then
        print_warning "kubectl is not installed."
        read -p "Would you like to install kubectl? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            install_kubectl
        else
            print_error "kubectl is required to proceed. Exiting."
            exit 1
        fi
    else
        print_success "kubectl is already installed."
        kubectl version --client
    fi
}

# Start Minikube cluster
start_cluster() {
    print_status "Starting Minikube cluster..."
    
    # Check if cluster is already running
    if minikube status | grep -q "host: Running"; then
        print_success "Minikube cluster is already running."
    else
        print_status "Starting new Minikube cluster..."
        minikube start --driver=docker --memory=4096 --cpus=2
        
        if [ $? -eq 0 ]; then
            print_success "Minikube cluster started successfully!"
        else
            print_error "Failed to start Minikube cluster."
            exit 1
        fi
    fi
}

# Verify cluster is running
verify_cluster() {
    print_status "Verifying that the cluster is running..."
    
    echo "----------------------------------------"
    echo "Cluster Information:"
    echo "----------------------------------------"
    kubectl cluster-info
    
    if [ $? -eq 0 ]; then
        print_success "Cluster is running and accessible!"
    else
        print_error "Failed to connect to cluster."
        exit 1
    fi
    
    echo
    echo "----------------------------------------"
    echo "Node Information:"
    echo "----------------------------------------"
    kubectl get nodes
    
    echo
    echo "----------------------------------------"
    echo "Cluster Status:"
    echo "----------------------------------------"
    minikube status
}

# Retrieve available pods
get_pods() {
    print_status "Retrieving available pods..."
    
    echo "----------------------------------------"
    echo "Pods in all namespaces:"
    echo "----------------------------------------"
    kubectl get pods --all-namespaces
    
    echo
    echo "----------------------------------------"
    echo "Pods in default namespace:"
    echo "----------------------------------------"
    kubectl get pods
    
    if [ $? -eq 0 ]; then
        print_success "Successfully retrieved pod information!"
    else
        print_warning "Could not retrieve pods (this is normal for a new cluster)."
    fi
}

# Create a sample deployment for testing
create_sample_deployment() {
    print_status "Creating a sample deployment for testing..."
    
    # Create a simple nginx deployment
    kubectl create deployment hello-minikube --image=nginx:latest --port=80
    
    # Wait for deployment to be ready
    print_status "Waiting for deployment to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/hello-minikube
    
    # Expose the deployment
    kubectl expose deployment hello-minikube --type=NodePort --port=80
    
    print_success "Sample deployment created and exposed!"
    
    echo
    echo "----------------------------------------"
    echo "Sample Deployment Status:"
    echo "----------------------------------------"
    kubectl get deployments
    kubectl get services
    kubectl get pods
}

# Display useful commands
show_useful_commands() {
    echo
    echo "=========================================="
    echo "Useful Kubernetes Commands:"
    echo "=========================================="
    echo "• Check cluster status: kubectl cluster-info"
    echo "• Get all pods: kubectl get pods --all-namespaces"
    echo "• Get nodes: kubectl get nodes"
    echo "• Get services: kubectl get services"
    echo "• Get deployments: kubectl get deployments"
    echo "• Minikube dashboard: minikube dashboard"
    echo "• Stop Minikube: minikube stop"
    echo "• Delete Minikube cluster: minikube delete"
    echo "• Minikube status: minikube status"
    echo "• Access service: minikube service hello-minikube"
    echo "=========================================="
}

# Main execution
main() {
    echo "Starting Kubernetes setup process..."
    echo
    
    # Step 1: Check and install Minikube
    check_minikube
    echo
    
    # Step 2: Check and install kubectl
    check_kubectl
    echo
    
    # Step 3: Start the cluster
    start_cluster
    echo
    
    # Step 4: Verify cluster is running
    verify_cluster
    echo
    
    # Step 5: Retrieve available pods
    get_pods
    echo
    
    # Step 6: Create sample deployment (optional)
    read -p "Would you like to create a sample deployment for testing? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        create_sample_deployment
        echo
    fi
    
    # Step 7: Show useful commands
    show_useful_commands
    
    print_success "Kubernetes cluster setup completed successfully!"
    print_status "Your cluster is ready for use."
}

# Run main function
main "$@"
