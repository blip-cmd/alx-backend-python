pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = 'your-dockerhub-username/messaging-app'
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh '''
                    cd messaging_app
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }
        
        stage('Code Quality Check') {
            steps {
                sh '''
                    cd messaging_app
                    . venv/bin/activate
                    flake8 chats/ --format=junit-xml --output-file=flake8-report.xml || true
                '''
                publishTestResults testResultsPattern: 'messaging_app/flake8-report.xml'
            }
        }
        
        stage('Run Tests') {
            steps {
                sh '''
                    cd messaging_app
                    . venv/bin/activate
                    export DJANGO_SETTINGS_MODULE=messaging_app.settings
                    python -m pytest chats/tests.py --tb=short --junitxml=test-reports/junit.xml --cov=chats --cov-report=xml --cov-report=html || true
                '''
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'messaging_app/test-reports/junit.xml'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        cd messaging_app
                        docker build -t ${DOCKER_HUB_REPO}:${BUILD_NUMBER} .
                        docker tag ${DOCKER_HUB_REPO}:${BUILD_NUMBER} ${DOCKER_HUB_REPO}:latest
                    '''
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    sh '''
                        echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin
                        docker push ${DOCKER_HUB_REPO}:${BUILD_NUMBER}
                        docker push ${DOCKER_HUB_REPO}:latest
                    '''
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}