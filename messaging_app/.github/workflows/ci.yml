name: CI - Testing and Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: messaging_db
          MYSQL_USER: messaging_user
          MYSQL_PASSWORD: messaging_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd messaging_app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h"127.0.0.1" --silent; then
            echo "MySQL is ready"
            break
          fi
          echo "Waiting for MySQL..."
          sleep 1
        done
    
    - name: Setup environment variables
      run: |
        cd messaging_app
        echo "DJANGO_DB_NAME=messaging_db" >> .env
        echo "DJANGO_DB_USER=messaging_user" >> .env
        echo "DJANGO_DB_PASSWORD=messaging_pass" >> .env
        echo "DJANGO_DB_HOST=127.0.0.1" >> .env
        echo "DJANGO_DB_PORT=3306" >> .env
    
    - name: Run Django migrations
      run: |
        cd messaging_app
        python manage.py makemigrations
        python manage.py migrate
      env:
        DJANGO_SETTINGS_MODULE: messaging_app.settings
    
    - name: Run flake8 linting
      run: |
        cd messaging_app
        flake8 chats/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 chats/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run Django tests with coverage
      run: |
        cd messaging_app
        coverage run --source='.' manage.py test chats.tests
        coverage xml
        coverage html
      env:
        DJANGO_SETTINGS_MODULE: messaging_app.settings
    
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          messaging_app/coverage.xml
          messaging_app/htmlcov/
        retention-days: 30
    
    - name: Upload coverage to Codecov (optional)
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        file: ./messaging_app/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint-strict:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        cd messaging_app
        python -m pip install --upgrade pip
        pip install flake8 black
    
    - name: Run strict flake8 check
      run: |
        cd messaging_app
        # Fail the build if any linting errors are detected
        flake8 chats/ --count --max-line-length=88 --statistics
    
    - name: Check code formatting with Black
      run: |
        cd messaging_app
        black --check --diff chats/